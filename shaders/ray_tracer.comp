#version 450

// Based on the great tutorial "Ray Tracing in One Weekend Series"
//  by Peter Shirley, Trevor David Black, Steve Hollasch 
//  https://raytracing.github.io/books/RayTracingInOneWeekend.html

// Noise functions taken from Ray Tracer Demo godot project by HK-SAO
// https://godotengine.org/asset-library/asset/1550 

/*

List of features:
    - Supported objects:
        3D simples:
            - spheres

        2D simples:
            - triangles  

        -planes
    
    - Material types:
        -diffuse
        -metallic
        -transparent/glass
    
    - Multisampling

    - Procedural (and sampled) textures (soon)

    - Refraction tracking


POLICIES
========

The camera points in the negative z direction with positive y being up and positive x being right.

The render image's origin is in the top left. u direction is right and v is down.

Index 0 usually points to an empty or intentionally invalid value.

RayHit structs don't determine normals and intersection points on-hit. They 
have to have determine_rayhit called on them afterwards to have valid values.

Normals always point outwards from surfaces and are always normalized on creation.

Ray depth starts at 0 and goes up as depth increases.

Materials have something called refraction_depth. A lower number takes priority. 
See Refraction Tracking in PRE PROCESSOR STUFF

mtl_index and object_index refer to a material and an object in the global material list and 
object list respectively. There may be multiple object lists in which case an object_type enum
will determine which object list object_index points to. The object_type and object_index is 
encoded in an object_id. object_id is an unique identifier for every object.

texture_index and texture_type, similarly to object_index and object_type, point to a texture 
and specifies what kind of texture it is respectively. Similarly to object_index and object_type,
textrue_index and texture_type is consolidated into a texture_id. texture_type can have the flag
is_sampled which means the texture is sampled. If not then the texture is procedurally generated.

Procedural textures are single function files which takes in a vec3 position and returns a vec4 color.
These functions are written in a seperate file and inserted into this file by the preprocessor. 
The function's name should be "procedural_texture".
 

LONG TERM GOALS
===============

    - Add detail when standing still -- DONE --

    - Add skybox

    - Add surface textures -- ALMOST --

    - Make set theory functions possible with objects like add and subtract 
        (can see insides of objects)

    - Subfurface scattering

    - Add lighting -- BASIC --

    - Make a real time ray tracer with triangle geometry (will be scuffed) -- ALMOST --

    - Implement meshlets for more dynamic materials and better culling (for traingles)

    - Simulate glass of beer

*/


// Invocations in the (x, y, z) dimension
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// PRE PROCESSOR STUFF

/*
Different methods to avoid self intersection
    - method 0: Proposed in Ray Tracing Gems.
        Use a custom function to offset intersection point when creating a new ray.
        My implementation doesn't seem to work correctly as it produces some nasty artifacts.
        Some of them are:
         -visible lines in noise when multisampling is disabled
         -weird lines on a center circle in the random scene
         -being a little more expensive to run
         -darker colors, although that might be more correct
    - method 1: Proposed in Ray tracing in a weekend. 
        Simply sets range for valid t values a little above zero.
        TODO Preferred method until I get method 0 to work properly     
*/
#define self_intersect_method 1

/*
// Fun fact, I made it the fuck up
Refraction tracking is the practice of answering the question, 
if I enter 3 transparant objects, when I leave only one, what material am I in.
Refraction tracking solves this by assigning a refraction depth value to all materials,
and choosing the material with the lowest depth when leaving an object inside of another/others.

This should, in theory, come with the abiltiy to cut objects with another object that has
air as its material. It also allows for composite glass objects; Rays will travel through multiple
transparent objects with the same material as if it was one homogenous mass, 
although at a higher ray depth cost (It might not get out if max_default_depth is low).

Enabling refraction tracking has a small performance impact
*/
#define use_refraction_tracking 1

// Emissive materials
# define USE_EMISSION !0


// CONSTANTS
// =========
const int int_limit = 2147483647;
const float infinity = 1. / 0.;
const double pi_d = 3.1415926535897932385;
const float pi = 3.1415926535897932385;
const float pi_half = pi / 2.;
const float pi_double = pi * 2;
const float eps = 1e-6;

// Used by offset_ray function
const float origin = 1.0 / 32.0;
const float float_scale = 1.0 / 65536.0; 
const float int_scale = 256.0;

// object_type enumerator
// From now on, the object_type is encoded as the first byte of an object_id
const int is_not_obj = 0;
const int is_sphere = 1;
const int is_plane = 2;
const int is_triangle = 3;

// texture_type enumerator
const int is_sampled = 1;
const int is_spatial = 2;

const int is_procedural_flat = 0; // For uv procedural functions
const int is_procedural_spatial = 2; // For point hit procedural function
const int is_sampled_texture = 1; // For uv sampling from texture buffer
const int is_no_texture = 4;

// TODO Maybe object_id can removed and the shader just removes the first
//  matching ior and refraction_depth
//  JUST USE MATERIAL INDEX AS IDENTIFIER 
// Keeps values of inside_of neatly organized
struct InsideOf {
    int material_index;
    int refraction_depth;
};

// IORs
const float IOR_air = 1.0;
float current_IOR = IOR_air;

// The program will keep track of which objects a ray has passed through to do correct calculations
//  i.e. refraction tracking
// This is the maximum amount of overlapping geomtry that will be considered
const int max_refraction_depth = 8;

// Keeps track of first vacant index in stack
int inside_of_count = 0;

InsideOf empty_inside() {
    return InsideOf(0, int_limit - 1);
}

// Holds the object_id, obejct_type and refraction_depth of and object
InsideOf inside_of[max_refraction_depth] = InsideOf[](
    empty_inside(),
    empty_inside(),
    empty_inside(),
    empty_inside(),
    empty_inside(),
    empty_inside(),
    empty_inside(),
    empty_inside()
);
// TODO: Add support for cpu to send InsideOf buffer based on camera position


#if !USE_EMISSION
const vec4 default_color = vec4(0.7, 0.7, 0.9, 1);
#endif

#if USE_EMISSION
const vec4 default_color = vec4(0);
#endif
const int max_depth = 64 * 8; // Length of rayhits to visit stack in BVH 

int refraction_bounces = 0; // Counts the number of times a ray has refracted

int last_bvhnode = 0;

// Maximum number of children a BVHNode can have
const int max_children = 2; // Replaced by script preprocessor, do NOT touch this line
// NOTE: For some weird reason adding unneseccary padding gives a small performance boost
const int filler_const = -1 * int(mod(max_children, 4) - 4.); 

// Flags
const int flag_size = 31;
const int starting_bit = int(pow(2, flag_size - 1));
bool flags[flag_size];

bool use_bvh;
bool show_bvh_depth;

bool multisample;

// Random
// Code snippets taken from Ray tracer demo by HK-SHAO
struct Random {
    float seed;
    float value;
};

Random random = Random(42, 0);

// DATATYPES
// =========
struct Camera {
    vec3 pos;
    float focal_length;
    vec3 right;
    float viewport_width;
    vec3 up;
    float viewport_height;
    vec3 forward;
    float gamma;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct Material {
    // How much of the light between zero and one is reflected for each color, 
    // zero being black
    vec3 albedo; 
    // How much the reflections scatter 
    float roughness; 
    // IDK what this means, metal n stuff, 1 is metal, 0 is dielectric
    float metallic;

    // Value between 0 and 1 where 0 is fully opaque and 1 is fully transparent.
    // Values inbetween determine the energy loss per unit length. 
    // Non-opaque materials can refract.
    float opacity;
    float reflectivity;
    // Index of refraction
    float IOR;
    // In cases where a translusent object intersects other objects or contains other translusent 
    //  objects, the refraction_depth will determine which object's material will take precedence 
    //  in the intersection
    int refraction_depth;
    bool is_emissive;
    int temp2;
    int temp3;
    int temp4;
    int temp11;
    int temp21;
    int temp31;
};

// The materials stored in objects are indices to a global material array
struct Plane {
    vec3 normal;
    float d;
    int mtl_index;
    int texture_id;
    int filler0;
    int filler1;
};

struct Sphere {
    vec3 center;
    float radius;
    int mtl_index;
    int texture_id;
    int filler0;
    int filler1;
};

struct Triangle {
    // TODO SO MUCH SPACE OPTIMIZATION
    vec3 point1;
    float filler1;
    vec3 point2;
    float filler2;
    vec3 point3;
    float filler3;
    vec3 normal;
    float filler4;

    int mtl_index;
    int texture_id;
    int filler0;
    int filler5;
};

struct RayHit {
    // TODO Optimize rayhit memory consumption
    bool hit; // Whether the ray actually hit something
    bool is_emissive;

    // Stored on-hit
    float t; // Paramater value for ray
    int object_id; // The index of object hit in their respective object list, provided by object_type

    // Retrieved later
    int mtl_index; // Material of the object hit
    int texture_id;
    vec2 uv;

    vec3 point; // Intersection point between sphere and ray
    vec3 normal;
    vec4 color; // Whatever color the rayhit is determined to be 
};

struct Range {
    float start; 
    float end;
};

struct AABB {
    // only xyz used, they are vec4 to fit memory allocation
    // minimum.x < maximum.x etc. should always be true.
    // The w value is unused by the aabb, so it can be filled with whatever is useful
    vec4 minimum;
    vec4 maximum;
};

struct BVHNode {
    // A BVHNode is an node in a n-ary tree. They are stored in a global BVH buffer. 
    // Every node points to either child nodes or to objects with object_ids.
    int children[max_children];
    int temp_fill[filler_const];
    AABB bbox; 
};


// BUFFERS
// =======
layout(rgba32f, set = 0, binding = 0) uniform restrict image2D output_image;

layout(set = 1, binding = 0, std430) restrict readonly buffer LODBuffer {
    int width;
    int height;
    int samples_per_pixel; // How many rays are sent per pixel
    int max_default_depth; // How many bounces is sampled, for normal rays
    int max_refraction_bounces; // How many total extra bounces can occur on refraction
} LOD;

// Materials
layout(set = 2, binding = 0, std430) restrict readonly buffer MaterialBuffer {
    Material data[];
} materials;

// Objects
layout(set = 2, binding = 1, std430) restrict readonly buffer SpheresBuffer {
    Sphere data[];
} spheres;

layout(set = 2, binding = 2, std430) restrict readonly buffer PlanesBuffer {
    Plane data[];
} planes;

layout(set = 2, binding = 3, std430) restrict readonly buffer TrainglesBuffer {
    Triangle data[];
} triangles;

layout(set = 3, binding = 0, std430) restrict readonly buffer BVH_List {
    BVHNode list[];
} BVH;

layout(push_constant, std430) restrict readonly uniform constants {
    Camera camera;
    float time;
    int flags;
    ivec2 image_offset; // How many pixels offset should the viewport origin be
    float frame;
} push;

// UTILITY FUNCTIONS
// =================

Ray empty_ray() {
    return Ray(vec3(0), vec3(0));
}

RayHit empty_rayhit() {
    return RayHit(false, false, infinity, 0, 0, 0, vec2(0), vec3(0), vec3(0), vec4(0));
}

float atan2(float y, float x) {
    // Apparantly more stable atan function, read:
    // https://stackoverflow.com/questions/26070410/robust-atany-x-on-glsl-for-converting-xy-coordinate-to-angle

    bool s = (abs(x) > abs(y));
    return mix(pi / 2.0 - atan(x,y), atan(y,x), s); // Should perform as well as ternary
}

float reflectance(float eta, float cos_theta) {
    // Schlick's approximation for reflectivety
    float r0 = (1. - eta) / (1. + eta);
    r0 = r0 * r0;
    return r0 + (1. - r0) * pow(1. - cos_theta, 5.);
}

// Random functions
float rand(float seed) {
    return fract((seed * 23489.52364) / 0.0836);
}

float noise(inout Random r) {
    // Also taken from Ray Tracer Demo by HK-SHAO
    r.value = fract(sin(r.seed++) * 43758.5453123);
    return r.value;
}

float rand2(vec2 co) { 
  return fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);
}

vec3 rand_vec3(vec3 point) {
    // Creates a normalized vector in a random direction from a point
    vec3 n = vec3(
        rand(noise(random)) - 0.5, 
        rand(noise(random)) - 0.5, 
        rand(noise(random)) - 0.5);

    return normalize(n);
}

float hash(vec3 x) {
    // Also taken from Ray Tracer Demo by HK-SHAO
    uvec3 p = floatBitsToUint(x);
    p = 1103515245U * ((p.xyz >> 1U) ^ (p.yzx));
    uint h32 = 1103515245U * ((p.x ^ p.z) ^ (p.y >> 3U));
    uint n = h32 ^ (h32 >> 16U);
    return float(n) * (1.0 / float(0x7fffffff));
}

void swap(inout float a, inout float b) {
    // Swap the values of two floats
    a = a + b;
    b = a - b;
    a = a - b;
}

bool is_close(float value1, float value2) {
    // TODO COnsider implementing this algorithm:
    // https://stackoverflow.com/questions/4915462/how-should-i-do-floating-point-comparison
    // Whether a value is within an epsilon of value2
    return (value2 + eps > value1 && value1 > value2 - eps);
}

bool near_zero(vec3 vec) {
    // Whether a vec3 is close to zero in all fields
    return (abs(vec.x) < eps && abs(vec.y) < eps && abs(vec.z) < eps);
}

bool near_zero(float f) {
    return (abs(f) < eps);
}

vec3 offset_ray(const vec3 point, const vec3 normal) {
    // Calculates a new point for ray intersection, which stops self intersection
    // Implementation of algorithm in Ray Tracing Gems chapter 6.2.2.4
    ivec3 offset = ivec3(normal * int_scale);
    vec3 point_offset = vec3(
        intBitsToFloat(floatBitsToInt(point.x) + ((point.x < 0.) ? -offset.x : offset.x)),
        intBitsToFloat(floatBitsToInt(point.y) + ((point.y < 0.) ? -offset.y : offset.y)),
        intBitsToFloat(floatBitsToInt(point.z) + ((point.z < 0.) ? -offset.z : offset.z))
    );
    return vec3(
        abs(point.x) < origin ? point.x + float_scale * normal.x : point_offset.x,
        abs(point.y) < origin ? point.y + float_scale * normal.y : point_offset.y,
        abs(point.z) < origin ? point.z + float_scale * normal.z : point_offset.z
    );
}

bool in_range(float value, Range range) {
    // In range inclusively start and stop values
    return (range.start <= value && range.end >= value);
}

bool xin_range(float value, Range range) {
    // In range exclusively start and stop values
    return (range.start < value && range.end > value);
}

vec3 ray_at(Ray ray, float t) {
    return ray.origin + ray.direction * t;
}

void parse_flags() {
    int bit = starting_bit;
    int num = push.flags;
    // Loop over the i-th bit from most significant to least
    for (int i = flag_size - 1; i >= 0; i--) {
        num -= bit;
        if (num < 0) {
            flags[i] = false;
            num += bit;
        } else {
            flags[i] = true;
        }
        bit = bit >> 1;
    }

    use_bvh = flags[0];
    show_bvh_depth = flags[1];
    multisample = flags[2];
}

int get_object_type(int object_id) {
    return object_id >> 24;
}

int get_object_index(int object_id) {
    const int three_last_bytes = int_limit >> 8;
    return object_id & three_last_bytes;
}

int get_texture_type(int texture_id) {
    return texture_id >> 30;
}

int get_texture_index(int texture_id) {
    const int thirty_last_bits = int_limit >> 2;
    return texture_id & thirty_last_bits;
}


// TEXTURE STUFF
// =============

vec2 sphere_get_uv(vec3 pos) {
    float theta = acos(-pos.y);
    float phi = atan(-pos.z, pos.x) + pi;

    vec2 uv = vec2(phi / pi_double, theta / pi);

    return uv;

}

// Preprocessor will place procedural function definitions here
//procedural_texture_function_definition_hook

vec4 procedural_texture(vec3 pos, int function) {
    // This function will be pre processed and filled procedural texture functions.
    // For sampled textures there is a different implementation (not yet implemented)
    
    // Return white as default function
    if (function == 0) {
        return vec4(1);
    }
    
    // Preprocessor will insert procedural texture functions here
    //procedural_texture_function_call_hook

    // Return black when function not found
    return vec4(0);
}


vec4 get_texture(RayHit rayhit) {
    int texture_type = get_texture_type(rayhit.texture_id);
    vec3 sampled_point = (texture_type & is_spatial) > 0 ? rayhit.point : vec3(rayhit.uv, 0);
    
    if ((texture_type & is_sampled) > 0) {
        // TODO DO SAMPLED TEXTURE HERE
        return vec4(1);
    }
    
    return procedural_texture(sampled_point, get_texture_index(rayhit.texture_id));
}


// RAY-HIT FUNCTIONS
// =============

vec4 hit_skybox(Ray ray, inout RayHit rayhit) {
    // TODO: Implement skybox texture and hit detection
    return default_color;
}

void set_rayhit(inout RayHit rayhit, float t, int object_id) {
    // TODO Set range on ray-hit instead of rayhit
    rayhit.hit = true;
    rayhit.t = t;
    rayhit.object_id = object_id;
}

bool hit_AABB(Ray ray, AABB bbox, Range range, vec3 inv_dir, bvec3 is_dir_neg) {
    // Returns true if ray hits aabb within given range
    for (int i = 0; i < 3; i++) {
        float orig = ray.origin[i]; // This is an optimazation. Source: Trust me (real)
        float t0 = ((bbox.minimum[i] - orig) * inv_dir[i]);
        float t1 = ((bbox.maximum[i] - orig) * inv_dir[i]);

        // Make sure t0 is smallest
        if (is_dir_neg[i]) {swap(t0, t1);}

        if (t0 > range.start) {range.start = t0;}
        if (t1 < range.end) {range.end = t1;}

        if (range.end <= range.start) {return false;}
    }
    return true;
}

RayHit hit_sphere(Ray ray, int object_id, Range t_range, inout RayHit rayhit) {

    Sphere sphere = spheres.data[get_object_index(object_id)];
    // Calculate the determinant of quadratic formula
    vec3 oc = ray.origin - sphere.center;
    float a = dot(ray.direction, ray.direction);
    float half_b = dot(oc, ray.direction);
    float c = dot(oc, oc) - sphere.radius * sphere.radius;

    float discriminant = half_b * half_b - a*c;

    // Early return if ray does not hit
    if (discriminant < 0.) {
        return rayhit;
    } 

    float sqrtd = sqrt(discriminant);
    float root = (-half_b - sqrtd) / a;

    // If root is within a valid t range and less than previous rayhit
    if (!in_range(root, t_range) || root > rayhit.t) {
        root = (-half_b + sqrtd) / a;
        if (!in_range(root, t_range)  || root > rayhit.t) {
            return rayhit;
        }
    }

    // Set rayhit variables
    set_rayhit(rayhit, root, object_id);

    return rayhit;
}

RayHit hit_spheres(Ray ray, Range t_range, inout RayHit rayhit) {
    if (near_zero(vec3(spheres.data[0].radius))) {return rayhit;} // Early return if no spheres in scene
    // Uses global scope sphere array to bypass function parameter limitations
    for (int i = 0; i < spheres.data.length(); ++i) {
        hit_sphere(ray, i + (is_sphere << 24), t_range, rayhit);
    }
    return rayhit;
}

RayHit hit_plane(Ray ray, int object_id, Range t_range, inout RayHit rayhit) {
    
    Plane plane = planes.data[get_object_index(object_id)];

    float intersection_t = ((plane.d - dot(ray.origin, plane.normal)) /
                            dot(plane.normal, ray.direction));

    // Early return if plane is paralell, even if the ray is contained in the plane
    if (isnan(intersection_t) || (isinf(intersection_t))) {
        return rayhit;
    }

    // Early return if t is not in range or further away than previous t
    if (!in_range(intersection_t, t_range) || intersection_t > rayhit.t) {
        return rayhit;
    }

    // Set rayhit variables
    set_rayhit(rayhit, intersection_t, object_id);

    return rayhit;
}

RayHit hit_planes(Ray ray, Range t_range, inout RayHit rayhit) {
    if (near_zero(planes.data[0].normal)) {return rayhit;} // Early return if no planes in scene
    // Uses global scope planes array to bypass function parameter limitations
    for (int i = 0; i < planes.data.length(); ++i) {
        hit_plane(ray, i + (is_plane << 24), t_range, rayhit);
    }
    return rayhit;
}



// RAY-TRIANGLE INTERSECTION FUNCTIONS
// ===================================

bool hit_triangle_MT_branchless(Ray ray, int object_id, Range t_range, inout RayHit rayhit) {
    // Implementation of the Moller-Trumbore algorithm made by BrunoLevy, fitted to project
    // https://stackoverflow.com/a/42752998

    int triangle_index = get_object_index(object_id);

    vec3 A = triangles.data[triangle_index].point1;
    vec3 B = triangles.data[triangle_index].point2;
    vec3 C = triangles.data[triangle_index].point3;

    vec3 E1 = B-A;
    vec3 E2 = C-A;
    vec3 N = cross(E1,E2);
    float det = -dot(ray.direction, N);
    float invdet = 1.0 / det;
    vec3 AO  = ray.origin - A;
    vec3 DAO = cross(AO, ray.direction);
    float u =  dot(E2,DAO) * invdet;
    float v = -dot(E1,DAO) * invdet;
    float t =  dot(AO,N)  * invdet;


    if ((det >= 1e-6 && in_range(t, t_range) && t < rayhit.t && u >= 0.0 && v >= 0.0 && (u+v) <= 1.0)) {
        set_rayhit(rayhit, t, object_id);
        return true;
    }

    return false;
}

bool hit_triangle_MT(Ray ray, int object_id, Range t_range, inout RayHit rayhit) {
    // Implementation of the Moller-Trumbore algorithm made by BrunoLevy, fitted to project
    // https://stackoverflow.com/a/42752998

    int triangle_index = get_object_index(object_id);

    vec3 A = triangles.data[triangle_index].point1;
    vec3 B = triangles.data[triangle_index].point2;
    vec3 C = triangles.data[triangle_index].point3;
    
    vec3 E1 = B-A;
    vec3 E2 = C-A;
    vec3 N = cross(E1,E2);
    float det = -dot(ray.direction, N);
    // TODO Add global backface cull flag and object flag


    // If ray is parallel to triangle plane
    if (near_zero(det)) {
        return false;
    }

    float invdet = 1.0 / det;
    vec3 AO = ray.origin - A;
    float t = dot(AO,N) * invdet;

    
    if (!in_range(t, t_range) || t > rayhit.t) {
        return false;
    }

    vec3 DAO = cross(AO, ray.direction);
    float u = dot(C - A, DAO) * invdet;
    float v = -dot(B - A, DAO) * invdet;

    if (u >= 0.0 && v >= 0.0 && (u+v) <= 1.0) {
        set_rayhit(rayhit, t, object_id);
        return true;
    }

    return false;
}


RayHit hit_object(Ray ray, Range range, inout RayHit rayhit, int object_id) {
    // Chooses the appropriate hit_ function for given object_type
    int object_type = get_object_type(object_id);

    if (object_type == is_sphere) {
        return hit_sphere(ray, object_id, range, rayhit);
    } else if (object_type == is_triangle) {
        hit_triangle_MT(ray, object_id, range, rayhit);
        return rayhit;
    }
}


// OTHER RAY FUNCTIONS
// ===================


RayHit determine_rayhit(Ray ray_in, inout RayHit rayhit) {
    // Resolves intersextion point, normal and other information from rayhit 
    rayhit.point = ray_at(ray_in, rayhit.t);

    int object_type = get_object_type(rayhit.object_id);
    int object_index = get_object_index(rayhit.object_id);

    // Procedure for hitting sphere
    if (object_type == is_sphere) {
        Sphere sphere = spheres.data[object_index];
        rayhit.mtl_index = sphere.mtl_index;
        rayhit.texture_id = sphere.texture_id;
        rayhit.normal = (rayhit.point - sphere.center) / sphere.radius;
        rayhit.uv = sphere_get_uv(rayhit.point);

    // Procedure for hitting plane
    } else if (object_type == is_plane) {
        Plane plane = planes.data[object_index];
        rayhit.mtl_index = plane.mtl_index;
        rayhit.texture_id = plane.texture_id;
        rayhit.normal = plane.normal;
    
    // Procedure for hitting triangle
    } else if (object_type == is_triangle) {
        Triangle triangle = triangles.data[object_index];
        rayhit.mtl_index = triangle.mtl_index;
        rayhit.texture_id = triangle.texture_id;
        rayhit.normal = dot(triangle.normal, ray_in.direction) > 0 ? -triangle.normal : triangle.normal;
    }

    rayhit.color = vec4(materials.data[rayhit.mtl_index].albedo, 1);
    rayhit.is_emissive = materials.data[rayhit.mtl_index].is_emissive;
    return rayhit;
}

RayHit check_ray_hit(Ray ray, Range range) {
    
    RayHit rayhit = empty_rayhit();
    hit_spheres(ray, range, rayhit);
    hit_triangle_MT_branchless(ray, 1, range, rayhit);
    
    hit_planes(ray, range, rayhit);

    // TODO ADD intersection with skybox, would still count as not hit
    if (!rayhit.hit) {
        rayhit.color = default_color;
    }

    return rayhit;
}


RayHit check_ray_hit_BVH(Ray ray, Range range) {
    // Like check_ray_hit but it checks against a BVH tree instead of each object_list individually
    RayHit rayhit = empty_rayhit();

    // Stack of indices of nodes yet to traverse
    // NOTE: might need to be bigger for larger scenes and/or with higher order trees
    int to_visit[max_depth];
    // Index to top of the stack, points to vacant spot ABOVE the stack
    int to_visit_i = 0;

    // Index to current node being processed
    int current_index = last_bvhnode;

    // The node closest to the root or the root, that we have visited
    int highest_parent = last_bvhnode;

    bool small_break = false;

    vec3 new_point;

    // Pre-compute values for hit detection
    vec3 inv_direction = vec3(1. / ray.direction.x, 1. / ray.direction.y, 1. / ray.direction.z);
    bvec3 dir_is_negative = bvec3(inv_direction.x < 0., inv_direction.y < 0., inv_direction.z < 0.);

    int hit_check_count = 0;
    while (true) {
        if (current_index >= max_depth) {
            break;
        }
        BVHNode node = BVH.list[current_index];

        hit_check_count++;

        // If ray already hit something, ignore aabbs which are not in the same octant as the 
        //  ray origin relative to the intersection point
        if (rayhit.hit) {
            // TODO Consider calculating point on-hit so we can skip these calculations
            new_point = ray.origin + ray.direction * rayhit.t;
            vec4 new_min = node.bbox.minimum;
            vec4 new_max = node.bbox.maximum;

            small_break = (ray.direction.x > 0.) ? (new_point.x < new_min.x) :
             (new_point.x > new_max.x);
            if (!small_break) {
                small_break = (ray.direction.y > 0.) ? (new_point.y < new_min.y) :
                 (new_point.y > new_max.y);

                if (!small_break) {
                    small_break = (ray.direction.z > 0.) ? (new_point.z < new_min.z) :
                     (new_point.z > new_max.z);
                }
            }
        }

        if (!small_break) {
            if (hit_AABB(ray, node.bbox, range, inv_direction, dir_is_negative)) {
                // Loop over child indices to add them to stack or do hit check
                for (int i = 0; i < max_children; i++) {
                    int tochild = node.children[i];

                    // If child is invalid, skip
                    if (tochild == 0) {continue;}

                    if (get_object_type(tochild) == is_not_obj) {
                        // If children[i] points to inner node, add it to to_visit
                        to_visit[to_visit_i++] = tochild;
                    } 
                    else {
                        // children[i] points to object_index, do a hit test
                        // float t_before = rayhit.t;
                        // bool hit_before = rayhit.hit;
                        hit_object(ray, range, rayhit, tochild);
                        hit_check_count++;
                        
                        // if (!hit_before && rayhit.hit) {last_bvhnode = node.self;}
                        // if (hit_before && t_before > rayhit.t) {last_bvhnode = node.self;}
                    }
                }
            }
        }
        small_break = false;

        // ATTEMPT AT STARTING BVH SEARCH FROM PREVIOUSLY HIT OBJECT'S BVHNODE
        // Also currently broken, because BVHNode was changed.
        // To fix you can smuggle self and parent values in AABB.maximum.w and AABB.minimum.w 
        //  with a macro. Remember to change to_byte_array for bvhnodes.
        // ===================================================================
        // This attempt wasn't very succsessfull, performance was worse, but that might be because of
        // inoptimal bvh tree


        // // We can early break if all siblings have been checked and a hit is found
        // if (rayhit.hit && to_visit_i == 0) {
        //     // last_bvhnode = node.self;
        //     break;
        // }

        // if (to_visit_i == 0 && highest_parent == 0) {break;}

        // // visit grandparant if nothing to do and parent already visited
        // if (to_visit_i == 0 && highest_parent == node.parent && highest_parent != 0) {
        //     BVHNode parent = BVH.list[node.parent];
        //     parent = BVH.list[parent.parent];
        //     highest_parent = parent.self;
        //     for (int i = parent.child_count; i > 0; i--) {
        //         int new_child = parent.children[i - 1];
                
        //         // If parent's child is not the node we just calculated
        //         if (new_child != node.self) {
        //             to_visit[to_visit_i++] = new_child;
        //         }
        //     }
        // }

        // // // IMPORTANT: This shortcut assumes no aabb overlaps
        // // // Visit parent if nothing more to do and root node has not been visited yet
        // if (to_visit_i == 0 && highest_parent != 0) {
        //     BVHNode parent = BVH.list[node.parent];
        //     highest_parent = parent.self;
        //     for (int i = parent.child_count; i > 0; i--) {
        //         int new_child = parent.children[i - 1];
                
        //         // If parent's child is not the node we just calculated
        //         if (new_child != node.self) {
        //             to_visit[to_visit_i++] = new_child;
        //         }
        //     }
        // }
        // =======================================================================

        // Break if no more nodes to visit, else go to next node in list
        if (to_visit_i == 0) {
            // last_bvhnode = node.self;
            break;
        }
        current_index = to_visit[--to_visit_i];
    }
    
    hit_planes(ray, range, rayhit);

    // TODO ADD intersection with skybox, would still count as not hit
    if (!rayhit.hit) {
        rayhit.color = hit_skybox(ray, rayhit);
    }

    if (show_bvh_depth) {
        // TODO Improve visual accuracy 
        float a = float(hit_check_count) / float(BVH.list.length() * 2);
        float b = pow(a, 3.5);
        rayhit.color = vec4(a,b,1,0);
    }

    return rayhit;
}

// RAY-BOUNCE FUNCTIONS
// ====================
Ray reflect_ray(Ray ray_in, RayHit rayhit) {
    // Returns a new reflected ray based on ray_in and rayhit
    
    vec3 new_origin = rayhit.point;

    #if self_intersect_method==0
    new_origin = offset_ray(rayhit.point, rayhit.normal);
    #endif

    float metallic = materials.data[rayhit.mtl_index].metallic;

    vec3 reflected_dir = reflect(ray_in.direction, rayhit.normal) * metallic;
    vec3 dir_offset = rand_vec3(rayhit.point) * (1. - metallic);

    vec3 ray_dir = reflected_dir + dir_offset;
    
    // Reflects ray if it points into the object
    if (dot(ray_dir, rayhit.normal) < 0.) {
        ray_dir = reflect(ray_dir, rayhit.normal);
    }

    return Ray(new_origin, ray_dir);
}

int get_material(int material_index, int lowest_depth, bool ignore_self) {
    // Loop over materials that we have entered and not left, 
    //  pick the one with the lowest refraction_depth, ignore default values if specified
    int current_index = material_index;
    for (int i = 0; i < max_refraction_depth; i++) {
        InsideOf index = inside_of[i];
        if (index.refraction_depth < lowest_depth) {
            if (!(material_index == index.material_index) || !ignore_self) {
                lowest_depth = index.refraction_depth;
                current_index = index.material_index;
            } else {
                // same material is true, we ignore the same material one time
                ignore_self = false;
            }
        }
    }

    return current_index;
}

void remove_object_from_inside_of(int material_index) {
    int shift = 0;
    // NOTE: inside_of_count - 1 tested to be faster than looping over entire array
    for (int i = 0; i < inside_of_count; i++) {
        InsideOf index = inside_of[i];
        if (material_index == index.material_index) {
            shift = 1;
        }
        inside_of[i] = inside_of[i + shift];
    }
    inside_of_count--;
}

Ray refract_ray(Ray ray_in, inout RayHit rayhit) {
    // Returns a refracted or reflected ray based on ray_in and rayhit
    // TODO: Add support for cpu to send InsideOf buffer based on camera position
    // TODO: Add tiny random direction change coupled with color shift, prism, diffraction
    // TODO: Implement Beer's law:
    // https://www.flipcode.com/archives/Raytracing_Topics_Techniques-Part_3_Refractions_and_Beers_Law.shtml 
    
    vec3 new_origin = rayhit.point;

    // Whether object is inside the current object
    bool is_inside = bool(dot(rayhit.normal, ray_in.direction) > 0.);
    vec3 normal = (is_inside) ? -rayhit.normal : rayhit.normal;

    float eta_in = current_IOR;

    Material material = materials.data[rayhit.mtl_index];

    #if use_refraction_tracking==0
    float eta_out = (is_inside) ? IOR_air : material.IOR;
    float eta = eta_in / eta_out;
    #endif

    #if use_refraction_tracking==1
    // If ray is inside object ignore rayhti.mtl_index as having a possible eta_out, else
    //  rayhit.mtl_index is default material if no other materials are in inside_of.
    int depth = is_inside ? int_limit : material.refraction_depth;
    int current_material = get_material(rayhit.mtl_index, depth, is_inside);

    float eta_out = materials.data[current_material].IOR;
    float eta = eta_in / eta_out;

    // If ratio is one the ray will travel in a straight line
    if (is_close(eta, 1.0)) {
        // If ray was inside and went out, remove from inside_of list
        if (is_inside) {
            remove_object_from_inside_of(rayhit.mtl_index);
        } else {
            // If ray was outside and refracted, add to inside_of list
            inside_of[inside_of_count++] = InsideOf(rayhit.mtl_index, material.refraction_depth);
        }
    
        #if self_intersect_method==0
        new_origin = offset_ray(new_origin, -normal);
        #endif

        // TODO Only invalidate color if this object has the same color as the previous object
        rayhit.hit = false;

        // Add extra available bounces when ray refracts/goes through another object
        if (refraction_bounces < LOD.max_refraction_bounces - 1) {refraction_bounces++;}

        return Ray(new_origin, ray_in.direction);
    }
    #endif

    vec3 normalized_direction = normalize(ray_in.direction);

    // Calculate whether angle is shallow enough to disallow refraction
    float cos_theta = min(dot(-normalized_direction, normal), 1.);
    float sin_theta = sqrt(1. - cos_theta * cos_theta);
    bool cannot_refract = eta * sin_theta > 1.;

    // Check for internal reflection
    if (cannot_refract || (reflectance(eta, cos_theta) * (material.reflectivity) > noise(random))) {
        #if self_intersect_method==0
        return Ray(offset_ray(new_origin, normal), reflect(normalized_direction, normal));
        #endif

        #if self_intersect_method==1
        return Ray(new_origin, reflect(normalized_direction, normal));
        #endif
    } 

    current_IOR = eta_out;

    #if use_refraction_tracking==1
    // If ray was inside and went out, remove from inside_of list
    if (is_inside) {
        remove_object_from_inside_of(rayhit.mtl_index);
    } else {
        // If ray was outside and refracted, add to inside_of list
        inside_of[inside_of_count++] = InsideOf(rayhit.mtl_index, material.refraction_depth);
    }
    #endif

    #if self_intersect_method==0
    new_origin = offset_ray(new_origin, -normal);
    #endif

    // Add extra available bounces when ray refracts/goes through another object
    if (refraction_bounces < LOD.max_refraction_bounces - 1) {refraction_bounces++;}
    
    return Ray(new_origin, refract(normalized_direction, normal, eta));
}

Ray scatter_ray(Ray ray_in, RayHit rayhit) {
    // TODO Change the way rays are created based on roughness, less/ more scatter

    #if self_intersect_method==0
    vec3 new_origin = offset_ray(rayhit.point, rayhit.normal);
    #endif

    #if self_intersect_method==1
    vec3 new_origin = rayhit.point;
    #endif

    // Returns a scattered ray based on ray_in and rayhit
    vec3 ray_dir = rand_vec3(new_origin + ray_in.direction) + rayhit.normal;

    // If created ray pointed in opposite direction of normal
    ray_dir = near_zero(ray_dir) ? rayhit.normal : ray_dir;

    // Make sure reflected ray points in the same way as normal
    ray_dir = dot(ray_dir, rayhit.normal) < 0. ? ray_dir * -1.0 : ray_dir;

    return Ray(new_origin, ray_dir);
}

Ray bounce_ray(Ray ray_in, inout RayHit rayhit) {
    // Creates a new ray based material properties from the previous rayhit

    // TODO Make more sophisticated function choosing
    if (materials.data[rayhit.mtl_index].opacity < 1.) {
        return refract_ray(ray_in, rayhit);
    }

    if (materials.data[rayhit.mtl_index].metallic > 0.) {
        return reflect_ray(ray_in, rayhit);
    }

    return scatter_ray(ray_in, rayhit);
}

// MAIN FUNCTIONS
// ==============
vec4 cast_ray(Ray ray, Range range) {
    // Casts a ray with bounces and returns the color of the ray

    // Turns out computing colors in the same loop was faster, TODO maybe reconsider
    // Rayhit's color should determined in reverse order, so we to store them for later
    // RayHit rayhits[64];

    // Calculate rayhits
    Ray new_ray = ray;
    RayHit rayhit;
    refraction_bounces = 0;
    vec4 new_color = vec4(1);
    vec4 tex_col = vec4(1);

    for (int i = 0;i < LOD.max_default_depth + refraction_bounces; i++) {
        if (use_bvh) {
            rayhit = check_ray_hit_BVH(new_ray, range);

            // Send one ray, skip bouncing
            if (show_bvh_depth) {
                new_color = rayhit.color;
                break;
            }
        } else {
            rayhit = check_ray_hit(new_ray, range);
        }
        
        // Early break if no hit
        if (!rayhit.hit) {
            // Adds sky color as the last rayhit when miss
            new_color *= rayhit.color;
            break;
        }

        determine_rayhit(new_ray, rayhit);

        #if USE_EMISSION
        if (rayhit.is_emissive) {
            new_color *= rayhit.color;
            break;
        }
        #endif

        // Get texture color
        tex_col = get_texture(rayhit);

        new_ray = bounce_ray(new_ray, rayhit);

        // TODO: implement attenuation based on incident and exiting angles
        
        // Rayhit is invalidated if the ray goes through two transparent objects with the same material 
        if (rayhit.hit) {
            new_color *= rayhit.color * tex_col;
        }
    } 

    return new_color;
}


// The code we want to execute in each invocation
void main() {

    // VARIABLE DEFINITIONS
    // ====================

    const float width = float(LOD.width);
    const float height = float(LOD.height);

    // Calculate the vectors across the horizontal and down the vertical viewport edges.
    const vec3 viewport_u = push.camera.right * push.camera.viewport_width;
    const vec3 viewport_v = -push.camera.up * push.camera.viewport_height;

    // Calculate the horizontal and vertical delta vectors from pixel to pixel.
    const vec3 pixel_delta_u = viewport_u / width;
    const vec3 pixel_delta_v = viewport_v / height;

    // Calculate the location of the upper left pixel.
    const vec3 viewport_upper_left = push.camera.pos - push.camera.forward * push.camera.focal_length -
                                     (viewport_u + viewport_v) / 2.;

    const vec3 pixel00_loc = viewport_upper_left + 0.5 * (pixel_delta_u + pixel_delta_v);

    // gl_GlobalInvocationID uniquely identifies this invocation across all work groups
    // const uvec3 UVu = gl_GlobalInvocationID + uvec3(push.image_offset, 0);
    const ivec3 UVi = ivec3(gl_GlobalInvocationID) + ivec3(push.image_offset, 0);
    const vec3 UV = vec3(UVi);

    vec3 pixel_center = pixel00_loc + (UV.x * pixel_delta_u) + (UV.y * pixel_delta_v);

    random.seed  = hash(vec3(UV.xy, push.time));

    // Initialize render flags
    parse_flags();

    // CODE
    // ====

    // Create ray with offset
    vec3 offset = (pixel_delta_u / 2) * (rand(float(push.time)) - 1.) + 
                  (pixel_delta_v / 2) * (rand(float(push.time)) - 1.);
    vec3 ray_direction = pixel_center - push.camera.pos + offset;
    Ray ray = Ray(push.camera.pos, ray_direction);

    // Cast ray
    #if self_intersect_method == 0
    vec4 new_color = cast_ray(ray, Range(0.0, infinity));
    #endif

    #if self_intersect_method == 1
    vec4 new_color = cast_ray(ray, Range(0.0001, infinity));
    #endif

    // Apply gamma correction
    new_color.rgb = pow(new_color.rgb, vec3(push.camera.gamma));

    if (multisample) {
        vec4 prev_col = imageLoad(output_image, UVi.xy);
        new_color = mix(prev_col, new_color, 1.0 / max(1.0, push.frame));
    }

    imageStore(output_image, UVi.xy, new_color);
}


